dataMatrix$entropy
infoGain/dataMatrix$entropy[i]
dataMatrix$entropy
dataMatrix$entropy[i]
infoGain
1.8/2.25
dataMatrix$entropy[i]
infoGain
i <- 3
curRow <- sampleFeatureEntropy[[i]]
dataMatrix$entropy[i] - sum(curRow)/length(curRow)
dataMatrix$entropy[i]
sum(curRow)/length(curRow)
dataMatrix$entropy[i]
sum(curRow)/length(curRow)
sum(curRow)/length(curRow)
sampleFeatureEntropy
i <- 1023
curRow <- sampleFeatureEntropy[[i]]
curRow
dataMatrix$entropy[i] - sum(curRow)/length(curRow)
infoGain <- dataMatrix$entropy[i] - sum(curRow)/length(curRow)
dataMatrix$entropy[i]
infoGain/dataMatrix$entropy[i]
infoGain/dataMatrix$entropy[i]
infoGain
dataMatrix$entropy[i]
1.05/1.32
1.057/1.3213
1.057/1.321385
1.057108/1.321385
infoGain <- dataMatrix$entropy[i] - sum(curRow)/length(curRow)
infoGain
infoGain <- vector(mode = "numeric", length = length(sampleFeatureEntropy))
infoGain <- vector(mode = "numeric", length = length(sampleFeatureEntropy))
for(i in seq_along(sampleFeatureEntropy)) {
curRow <- sampleFeatureEntropy[[i]]
# case when only one feature makes up the group
if(dataMatrix$entropy[i] == 0) {
infoGain[i] <- 0
} else {
infoGain[i] <- dataMatrix$entropy[i] - sum(curRow)/length(curRow)
}
}
infoGain %>% hist(breaks = 30)
infoGain
infoGain %>% hist(breaks = 30)
log1p(infoGain) %>% hist(breaks = 30)
hist(dataMatrix$entropy, main = "Feature Entropy Distribution",
xlab = "Information Entropy")
mean(infoGain)
median(infoGain)
dataMatrix <- omanFT[,grep("-", colnames(omanFT))]
dataMatrix$entropy
keepRows <- dataMatrix %>% rowSums() > 0
dataMatrix <- dataMatrix[keepRows,] %>% log()
dataMatrix <- dataMatrix/rowSums(dataMatrix)
dataMatrix$entropy <- apply(dataMatrix, 1, function(row) {
if(any(row == 0)) {
row <- row[row != 0]
}
return(-sum(row * log2(row)))
})
hist(dataMatrix$entropy, main = "Feature Entropy Distribution",
xlab = "Information Entropy")
dataMatrix <- omanFT[,grep("-", colnames(omanFT))]
dataMatrix$entropy
keepRows <- dataMatrix %>% rowSums() > 0
dataMatrix <- dataMatrix[keepRows,] %>% log1p()
dataMatrix <- dataMatrix/rowSums(dataMatrix)
dataMatrix$entropy <- apply(dataMatrix, 1, function(row) {
if(any(row == 0)) {
row <- row[row != 0]
}
return(-sum(row * log2(row)))
})
hist(dataMatrix$entropy, main = "Feature Entropy Distribution",
xlab = "Information Entropy")
sampleFeatureEntropy <- apply(dataMatrix[,-6], 1, function(row) {
if(any(row == 0)) {
row <- row[row > 0]
}
p <- row/sum(row)
return(-p*log2(p))
})
infoGain <- vector(mode = "numeric", length = length(sampleFeatureEntropy))
for(i in seq_along(sampleFeatureEntropy)) {
curRow <- sampleFeatureEntropy[[i]]
# case when only one feature makes up the group
if(dataMatrix$entropy[i] == 0) {
infoGain[i] <- 0
} else {
infoGain[i] <- dataMatrix$entropy[i] - sum(curRow)/length(curRow)
}
}
infoGain %>% hist(breaks = 30)
infoGain
dataMatrix$entropy[i]
sum(curRow)/length(curRow)
infoGain %>% hist(breaks = 30)
log2((1/2))
log2((1.5/2))
log2((.7/2))
log2((.8/2))
log2((1.8/2))
log2((4/2))
p <- seq(from = 0, to = 1, by = 0.001)
p
plot(p, log2(p/2))
plot(p, log2(p/2)) + line(p, -2*p)
plot(p, log2(p/2)) + abline(p, -2*p)
plot(p, log2(p/2)) + abline(p, -2*p)
plot(p, log2(p/2)) + lines(p, -2*p)
plot(p, log2(p/2))
lines(p, -2*p)
plot(p, log2(p/2), type = "l")
lines(p, -2*p)
locator()
plot(p, log2(p/2), type = "l")
lines(p, -2*p)
locator()
plot(p, log2(p/2), type = "l")
lines(p, -2*p)
locator()
median(infoGain)
infoGain %>% hist(breaks = 30)
hist(dataMatrix$entropy, main = "Feature Entropy Distribution",
xlab = "Information Entropy",
breaks = 50)
log2(1/2)
1/2*log2(1/2)
infoGain %>% hist(breaks = 30, main = "Information Gain Per Feature",
xlab = "Information Gain")
infoGain <= 0.5
selectedFeatures <- infoGain <= 0.5
selectedFeatures <- infoGain <= 0.5
selectedFeatures
sum(selectedFeatures)
message("Total number of retained features:", sum(selectedFeatures))
sampleFeatureEntropy
sampleFeatureEntropy[selectedFeatures]
minEntropyId <- lapply(sampleFeatureEntropy[selectedFeatures], function(groups) {
names(groups)[which.max(groups)]
})
minEntropyId
minEntropyId <- sapply(sampleFeatureEntropy[selectedFeatures], function(groups) {
names(groups)[which.max(groups)]
})
minEntropyId
table(minEntropyId)
sampleFeatureEntropy
dataMatrix
dataMatrix[selectedFeatures,]
selectedData <- dataMatrix[selectedFeatures,]
dataMatrix
selectedData <- omanFT[selectedFeatures,]
selectedData
selectedFeatures
omanFT <- omanFT[keepRows,]
selectedData <- omanFT[selectedFeatures,]
selectedData
omanFT
is.na(omanFT$Neutral_Mass)
selectedData <- omanFT[selectedFeatures,]
read.csv(here::here("data/2018-11-22/OM17compoundIDs.csv"))
read.csv(here::here("data/2018-11-22/OM17 compound_measurements_10k_blanks.csv"))
read.csv(here::here("data/2018-11-22/OM17 compound_measurements_10k_blanks.csv"),
header = T)
read.csv(here::here("data/2018-11-22/OM17 compound_measurements_10k_blanks.csv"),
header = T, skip = 1)
read.csv(here::here("data/2018-11-22/OM17 compound_measurements_10k_blanks.csv"),
header = T, skip = 2)
?read.csv
read.csv(here::here("data/2018-11-22/OM17 compound_measurements_10k_blanks.csv"),
header = T, skip = 3)
read.csv(here::here("data/2018-11-22/OM17 compound_measurements_10k_blanks.csv"),
header = T, skip = 5)
origData <- read.csv(here::here("data/2018-11-22/OM17 compound_measurements_10k_blanks.csv"),
header = T, skip = 5)
i <- 1
selectedData$Retention_Time[i]
selectedData$Retention_Time[i]
$Retention.time..min.
origData$Retention.time..min.
origData$Retention.time..min. * 60
any(origData$Retention.time..min. * 60 == selectedData$Retention_Time[i] )
which(origData$Retention.time..min. * 60 == selectedData$Retention_Time[i] )
library(dplyr)
library(here)
library(corrplot)
omanFT <- read.csv(here("data/2018-11-22/OM17 compound_measurements_10k_blanks.csv"),
header = T,
skip = 4)
omanFT
metadata <- read.table(here("data/2018-11-22/metadata.txt"),
header = T, sep = " ", stringsAsFactors = F)
metadata <- metadata[-nrow(metadata),]
metadata
metadata$Sample_Name <- metadata$Sample_Name %>% sub(":", "", .)
dataCols <- list()
for(i in 1:nrow(metadata)) {
dataCols[[i]] <- grep(metadata$Sample_Name[i],colnames(omanFT))[1]
}
dataCols
colnames(omanFT)[c(3,5)] <- c("mz", "Retention_Time")
omanFT$Retention_Time <- omanFT$Retention_Time * 60
## consider
omanFT <- omanFT[,c(3,5, unlist(dataCols))]
dataCols <- grep("XS1", colnames(omanFT))
colnames(omanFT)[dataCols] <- metadata$Sample_Type[which(metadata$Sample_Name %in%
colnames(omanFT)[dataCols])]
rm(i)
omanFT
omanFT$mz
is.na(omanFT$mz) %>% sum()
omanFT <- read.csv(here("data/2018-11-22/OM17 compound_measurements_10k_blanks.csv"),
header = T,
skip = 4)
metadata <- read.table(here("data/2018-11-22/metadata.txt"),
header = T, sep = " ", stringsAsFactors = F)
metadata <- metadata[-nrow(metadata),]
metadata$Sample_Name <- metadata$Sample_Name %>% sub(":", "", .)
dataCols <- list()
for(i in 1:nrow(metadata)) {
dataCols[[i]] <- grep(metadata$Sample_Name[i],colnames(omanFT))[1]
}
colnames(omanFT)[c(3,5)] <- c("mz", "Retention_Time")
omanFT$Retention_Time <- omanFT$Retention_Time * 60
## consider
omanFT <- omanFT[,c(3,5, unlist(dataCols))]
dataCols <- grep("XS1", colnames(omanFT))
colnames(omanFT)[dataCols] <- metadata$Sample_Type[which(metadata$Sample_Name %in%
colnames(omanFT)[dataCols])]
rm(i)
intensityTable <- omanFT[,dataCols]
x <- sapply(1:ncol(intensityTable), function(x) {
hist(intensityTable[,x], main = colnames(intensityTable)[x], breaks = 250)
})
omanFT[,dataCols] <- log1p(intensityTable)
rm(x, intensityTable)
heat <- omanFT[,dataCols]
blankCols <- grep("blank", colnames(heat), ignore.case = T)
name <- c("Count")
solvent <- heat[,blankCols[1]] > 0
spe <- heat[,blankCols[2]] > 0
overlap <- solvent | spe
knitr::kable(data.frame(Blank = name, Solvent = sum(solvent), SPE = sum(spe),
Overlap = sum(overlap), Total = length(spe)))
heatmap(as.matrix(heat), main = "Distribution of Features Between Samples")
rm(solvent, spe, overlap, name)
blankData <- heat[,blankCols]
sampleData <- heat[,-blankCols]
double <- log1p(2)
doubleCheck <- list()
for(i in seq_along(blankCols)) {
#minVal <- min(blankData[,i][blankData[,i] > 0])
#x <- blankData[,i][blankData[,i] == 0] <- minVal
foldChange <- apply(sampleData, 2, function(x) {
y <- x/blankData[,i]
infIndex <- is.infinite(y)
y[is.nan(y)] <- 0
if(length(infIndex) > 0) {
y[infIndex] <- max(y[!infIndex])
}
y
}) %>% apply(1, max)
hist(log(foldChange), breaks = 100,
main = paste(colnames(blankData)[i], "Features Under Median Sample Intensity"))
abline(v = double, lty = 2)
doubleCheck[[i]] <- foldChange > double
}
message("Difference in Retained Features Between Approaches: ", 2089 - 1242)
solvent <- !doubleCheck[[1]]
spe <- !doubleCheck[[2]]
overlap <- solvent | spe
name <- c("Count")
knitr::kable(data.frame(Blank = name, Solvent = sum(solvent), SPE = sum(spe),
Overlap = sum(overlap), Total = length(spe)))
omanFT <- omanFT[!overlap,]
rm(list=setdiff(ls(), c("omanFT", "metadata", "dataCols")))
heatmap(as.matrix(omanFT[,dataCols]), main = "Feature Distribution After QA")
omanFT <- omanFT[,!grepl("blank", colnames(omanFT), ignore.case = T)]
rowSums(omanFT[,dataCols] )
omanFT[,dataCols]
omanFT
rowSums(omanFT[,grep("-", colnames(omanFT))])
rowSums(omanFT[,grep("-", colnames(omanFT))]) == 0
rowSums(omanFT[,grep("-", colnames(omanFT))]) > 0
zeroRows <- rowSums(omanFT[,grep("-", colnames(omanFT))]) > 0
omanFT <- omanFT[zeroRows,]
omanFT
sum(!zeroRows)
write.table(omanFT,
file = here("data/2018-11-23/QA_oman_feature_table.txt"),
row.names = F)
omanFT[,3:7] %>% apply(2, function(col) {sum(col == 0)/length(col)})
omanFT[,3:7] %>% as.matrix() %>% t() %>% cor() %>% corrplot()
library(dplyr)
library(here)
omanFT <- read.table(here::here("data/2018-11-23/QA_oman_feature_table.txt"), header = T,
stringsAsFactors = F)
dataCols <- 3:7
omanFT
dataCols <- 3:7
dataMatrix <- omanFT[,grep("-", colnames(omanFT))]
dataMatrix$entropy
dataMatrix <- omanFT[,grep("-", colnames(omanFT))]
dataMatrix$entropy
keepRows <- dataMatrix %>% rowSums() > 0
omanFT <- omanFT[keepRows,]
dataMatrix <- dataMatrix[keepRows,] %>% log1p()
dataMatrix <- dataMatrix/rowSums(dataMatrix)
dataMatrix$entropy <- apply(dataMatrix, 1, function(row) {
if(any(row == 0)) {
row <- row[row != 0]
}
return(-sum(row * log2(row)))
})
hist(dataMatrix$entropy, main = "Feature Entropy Distribution",
xlab = "Information Entropy",
breaks = 50)
keepRows
keepRows %>% ANY()
keepRows %>% any()
dataMatrix <- omanFT[,grep("-", colnames(omanFT))]
dataMatrix$entropy
dataMatrix <- dataMatrix/rowSums(dataMatrix)
dataMatrix$entropy <- apply(dataMatrix, 1, function(row) {
if(any(row == 0)) {
row <- row[row != 0]
}
return(-sum(row * log2(row)))
})
hist(dataMatrix$entropy, main = "Feature Entropy Distribution",
xlab = "Information Entropy",
breaks = 50)
colnames(omanFT)
library(dplyr)
library(here)
omanFT <- read.table(here::here("data/2018-11-23/QA_oman_feature_table.txt"), header = T,
stringsAsFactors = F)
dataCols <- 3:7
dataMatrix <- omanFT[,grep("-", colnames(omanFT))]
dataMatrix$entropy
dataMatrix <- dataMatrix/rowSums(dataMatrix)
dataMatrix$entropy <- apply(dataMatrix, 1, function(row) {
if(any(row == 0)) {
row <- row[row != 0]
}
return(-sum(row * log2(row)))
})
hist(dataMatrix$entropy, main = "Feature Entropy Distribution",
xlab = "Information Entropy",
breaks = 50)
library(dplyr)
library(here)
omanFT <- read.table(here::here("data/2018-11-23/QA_oman_feature_table.txt"), header = T,
stringsAsFactors = F)
dataCols <- 3:7
dataMatrix <- omanFT[,grep("-", colnames(omanFT))]
dataMatrix
dataMatrix <- dataMatrix/rowSums(dataMatrix)
dataMatrix
library(dplyr)
library(here)
omanFT <- read.table(here::here("data/2018-11-23/QA_oman_feature_table.txt"), header = T,
stringsAsFactors = F)
dataCols <- 3:7
colnames(omanFT)
dataMatrix <- omanFT[,grep("\\.", colnames(omanFT))]
dataMatrix
dataMatrix <- dataMatrix/rowSums(dataMatrix)
dataMatrix$entropy <- apply(dataMatrix, 1, function(row) {
if(any(row == 0)) {
row <- row[row != 0]
}
return(-sum(row * log2(row)))
})
hist(dataMatrix$entropy, main = "Feature Entropy Distribution",
xlab = "Information Entropy",
breaks = 50)
sampleFeatureEntropy <- apply(dataMatrix[,-6], 1, function(row) {
if(any(row == 0)) {
row <- row[row > 0]
}
p <- row/sum(row)
return(-p*log2(p))
})
infoGain <- vector(mode = "numeric", length = length(sampleFeatureEntropy))
for(i in seq_along(sampleFeatureEntropy)) {
curRow <- sampleFeatureEntropy[[i]]
# case when only one feature makes up the group
if(dataMatrix$entropy[i] == 0) {
infoGain[i] <- 0
} else {
infoGain[i] <- dataMatrix$entropy[i] - sum(curRow)/length(curRow)
}
}
infoGain %>% hist(breaks = 30, main = "Information Gain Per Feature",
xlab = "Information Gain")
selectedFeatures <- infoGain <= 0.5
message("Total number of retained features: ", sum(selectedFeatures))
minEntropyId <- sapply(sampleFeatureEntropy[selectedFeatures], function(groups) {
names(groups)[which.max(groups)]
})
table(minEntropyId)
sampleFeatureEntropy
minEntropyId <- sapply(sampleFeatureEntropy[selectedFeatures], function(groups) {
names(groups)
})
minEntropyId
minEntropyId <- sapply(sampleFeatureEntropy[selectedFeatures], function(groups) {
names(groups)
}) %>% unlist()
table(minEntropyId)
selectedData <- omanFT[selectedFeatures,]
selectedData
minEntropyId <- sapply(sampleFeatureEntropy[selectedFeatures], function(groups) {
names(groups)[which.min(groups)]
})
table(minEntropyId)
minEntropyId <- sapply(sampleFeatureEntropy[selectedFeatures], function(groups) {
names(groups)[which.min(groups)]
})
minEntropyId
minEntropyId <- sapply(sampleFeatureEntropy[selectedFeatures], function(groups) {
names(groups)[which.min(groups)]
})
table(minEntropyId)
selectedData <- omanFT[selectedFeatures,]
origData <- read.csv(here::here("data/2018-11-22/OM17 compound_measurements_10k_blanks.csv"),
header = T, skip = 5)
minEntropyId
origData
origData
selectedData
selectedData$classifier <- minEntropyId
selectedData
read.csv(here::here("data/2018-11-22/OM17 compound_measurements_10k_blanks.csv"))
read.csv(here::here("data/2018-11-22/OM17 compound_measurements_10k_blanks.csv"),
header = T)
read.csv(here::here("data/2018-11-22/OM17 compound_measurements_10k_blanks.csv"),
header = T, skip = 1)
read.csv(here::here("data/2018-11-22/OM17 compound_measurements_10k_blanks.csv"),
header = T, skip = 4)
read.csv(here::here("data/2018-11-22/OM17compoundIDs.csv"),
header = T, skip = 4)
read.csv(here::here("data/2018-11-22/OM17compoundIDs.csv"),
header = T, skip = 0)
compoundDb <- read.csv(here::here("data/2018-11-22/OM17compoundIDs.csv"),
header = T, skip = 0)
colnames(compoundDb)
paste(compoundDb$m.z, compoundDb$Retention.time..min., sep = "_")
obsFeatures <- paste(signif(compoundDb$m.z),
signif(compoundDb$Retention.time..min., sep = "_"))
obsFeatures <- paste(signif(compoundDb$m.z),
signif(compoundDb$Retention.time..min.), sep = "_")
paste(signif(selectedData$mz),
signif(selectedData$Retention_Time),
sep = "_")
infoFeatures <- paste(signif(selectedData$mz),
signif(selectedData$Retention_Time),
sep = "_")
lapply(infoFeatures, function(curFeat) {
which(curFeat == obsFeatures)
})
infoFeatures
obsFeatures
infoFeatures
obsFeatures
obsFeatures <- paste(signif(compoundDb$m.z),
signif(compoundDb$Retention.time..min. * 60), sep = "_")
obsFeatures
infoFeatures <- paste(signif(selectedData$mz),
signif(selectedData$Retention_Time),
sep = "_")
lapply(infoFeatures, function(curFeat) {
which(curFeat == obsFeatures)
})
matchedFeatures <- lapply(infoFeatures, function(curFeat) {
which(curFeat == obsFeatures)
})
matchedFeatures[[1]]
compoundDb
matchedFeatures
retainRows <- c(8113)
compoundDb[retainRows,] %>%
select(Adducts, Formula, Score, Fragmentation.Score,
Mass.Error..ppm., Description, m.z, Retention.time..min.)
compoundIds <- list()
for(i in seq_along(matchedFeatures)) {
if(length(matchedFeatures[[i]]) == 0) {
next
} else {
retainRows <- matchedFeatures[[i]]
}
compoundIds[[i]] <- compoundDb[retainRows,] %>%
select(Adducts, Formula, Score, Fragmentation.Score,
Mass.Error..ppm., Description, m.z, Retention.time..min.) %>%
mutate(infoRow = i)
}
compoundIds
Reduce(f = rbind, compoundIds)
matchedCompounds <- Reduce(f = rbind, compoundIds)
infoFeatures
obsFeatures
selectedData
write.table(x = matchedCompounds)
write.table(x = matchedCompounds, row.names = F)
write.table(x = matchedCompounds, row.names = F, file = here("data/2019-01-03/highInfoFeatures.txt"))
write.table(x = selectedData, row.names = F, file = here("data/2019-01-03/highInfoFeatures.txt"))
write.table(x = matchedCompounds, row.names = F, file = here("data/2019-01-03/highInfoCpdMatches.txt"))
