trainSamps
trainSamps <- logical(length = sum(groupCounts))
trainSamps
trainSamps[count$well == names(groupCounts)[1]][sample(size = 3,x = groupCounts[1])] <- T
trainSamps
trainSamps[count$well == names(groupCounts)[2]][sample(size = 3,x = groupCounts[2])] <- T
trainSamps[count$well == names(groupCounts)[3]][sample(size = 3,x = groupCounts[3])] <- T
trainSamps
train <- count[trainSamps,]
train
test  <- count[!trainSamps,]
rf <- randomForest(
# denotes what I'm actually predicting for
well ~ .,
data=train,
importance = T
)
train
rf <- randomForest(
# denotes what I'm actually predicting for
well ~ .,
data=train,
importance = T
)
bins <- read.csv(here::here("data/2020-05-03/bin_rpkm_filtered.csv"))
taxa <- read.csv(here::here("data/2020-05-03/bin_taxons_filtered.csv"))
library(NMF)
binNMF <- nmf(x = as.matrix(bins[,-1]), rank = 3)
keyFeatures <- extractFeatures(binNMF, method = 0.99)
linkedFactors <- apply(coef(binNMF), 1, function(row) {
row > 0.01
})
print(linkedFactors)
rm(linkedFactors, binNMF)
nshq <- bins[keyFeatures[[1]],1]
wab55 <- bins[keyFeatures[[2]],1]
wab105 <- bins[keyFeatures[[3]],1]
taxa$keyWell <- ""
taxa$keyWell[taxa$Bin.Id %in% gsub("-", "_", nshq)] <- "nshq"
taxa$keyWell[taxa$Bin.Id %in% gsub("-", "_", wab55)] <- "wab55"
taxa$keyWell[taxa$Bin.Id %in% gsub("-", "_", wab105)] <- "wab105"
taxa <- taxa[taxa$keyWell != "",]
write.csv(taxa, file = here::here("data/2020-05-03/key_well_taxa.csv"),
row.names = F)
rm(wab105,wab55, nshq, keyFeatures, bins)
binKos <- read.csv(here::here("data/2020-04-12/Oman_bins_kos.csv"),
stringsAsFactors = F)
# filtering data to only consider key bins
binKos <- binKos[,c(1:5,which(colnames(binKos) %in% taxa$Bin.Id))]
binKos <- binKos[!is.na(binKos$Metabolism),]
binKos[is.na(binKos)] <- 0
count <- t(binKos[,-c(1:5)])
colnames(count) <- binKos$KO_ID
count[count > 1] <- 1
count <- as.data.frame(count)
count$well <- taxa$keyWell
count$well <- as.factor(count$well)
library(randomForest)
require(caTools)
groupCounts <- table(count$well)
trainSamps <- logical(length = sum(groupCounts))
trainSamps[count$well == names(groupCounts)[1]][sample(size = 3,x = groupCounts[1])] <- T
trainSamps[count$well == names(groupCounts)[2]][sample(size = 3,x = groupCounts[2])] <- T
trainSamps[count$well == names(groupCounts)[3]][sample(size = 3,x = groupCounts[3])] <- T
train <- count[trainSamps,]
train
binKos <- read.csv(here::here("data/2020-04-12/Oman_bins_kos.csv"),
stringsAsFactors = F)
binKos <- read.csv(here::here("data/2020-04-12/Oman_bins_kos.csv"),
stringsAsFactors = F)
# filtering data to only consider key bins
binKos <- binKos[,c(1:5,which(colnames(binKos) %in% taxa$Bin.Id))]
binKos <- binKos[!is.na(binKos$Metabolism),]
binKos[is.na(binKos)] <- 0
binKos[is.na(binKos)] <- 0
count <- t(binKos[,-c(1:5)])
binKos
bins <- read.csv(here::here("data/2020-05-03/bin_rpkm_filtered.csv"))
taxa <- read.csv(here::here("data/2020-05-03/bin_taxons_filtered.csv"))
library(NMF)
binNMF <- nmf(x = as.matrix(bins[,-1]), rank = 3)
keyFeatures <- extractFeatures(binNMF, method = 0.99)
linkedFactors <- apply(coef(binNMF), 1, function(row) {
row > 0.01
})
print(linkedFactors)
rm(linkedFactors, binNMF)
nshq <- bins[keyFeatures[[1]],1]
wab55 <- bins[keyFeatures[[2]],1]
wab105 <- bins[keyFeatures[[3]],1]
taxa$keyWell <- ""
taxa$keyWell[taxa$Bin.Id %in% gsub("-", "_", nshq)] <- "nshq"
taxa$keyWell[taxa$Bin.Id %in% gsub("-", "_", wab55)] <- "wab55"
taxa$keyWell[taxa$Bin.Id %in% gsub("-", "_", wab105)] <- "wab105"
taxa <- taxa[taxa$keyWell != "",]
write.csv(taxa, file = here::here("data/2020-05-03/key_well_taxa.csv"),
row.names = F)
rm(wab105,wab55, nshq, keyFeatures, bins)
binKos <- read.csv(here::here("data/2020-04-12/Oman_bins_kos.csv"),
stringsAsFactors = F)
binKos <- read.csv(here::here("data/2020-04-12/Oman_bins_kos.csv"),
stringsAsFactors = F)
# filtering data to only consider key bins
binKos <- binKos[,c(1:5,which(colnames(binKos) %in% taxa$Bin.Id))]
# filtering data to only consider key bins
binKos <- binKos[,c(1:5,which(colnames(binKos) %in% taxa$Bin.Id))]
binKos <- binKos[!is.na(binKos$Metabolism),]
binKos[is.na(binKos)] <- 0
count <- t(binKos[,-c(1:5)])
count
colnames(count) <- binKos$KO_ID
count
binKos
binKos[,grep("Bin", colnames(binKos))]
count
colnames(count) <- binKos$KO_ID
count[count > 1] <- 1
count <- as.data.frame(count)
count$well <- taxa$keyWell
count$well <- as.factor(count$well)
binKos <- read.csv(here::here("data/2020-04-12/Oman_bins_kos.csv"),
stringsAsFactors = F)
bins <- read.csv(here::here("data/2020-05-03/bin_rpkm_filtered.csv"))
taxa <- read.csv(here::here("data/2020-05-03/bin_taxons_filtered.csv"))
library(NMF)
binNMF <- nmf(x = as.matrix(bins[,-1]), rank = 3)
keyFeatures <- extractFeatures(binNMF, method = 0.99)
linkedFactors <- apply(coef(binNMF), 1, function(row) {
row > 0.01
})
print(linkedFactors)
rm(linkedFactors, binNMF)
nshq <- bins[keyFeatures[[1]],1]
wab55 <- bins[keyFeatures[[2]],1]
wab105 <- bins[keyFeatures[[3]],1]
taxa$keyWell <- ""
taxa$keyWell[taxa$Bin.Id %in% gsub("-", "_", nshq)] <- "nshq"
taxa$keyWell[taxa$Bin.Id %in% gsub("-", "_", wab55)] <- "wab55"
taxa$keyWell[taxa$Bin.Id %in% gsub("-", "_", wab105)] <- "wab105"
taxa <- taxa[taxa$keyWell != "",]
write.csv(taxa, file = here::here("data/2020-05-03/key_well_taxa.csv"),
row.names = F)
rm(wab105,wab55, nshq, keyFeatures, bins)
binKos <- read.csv(here::here("data/2020-04-12/Oman_bins_kos.csv"),
stringsAsFactors = F)
# filtering data to only consider key bins
binKos <- binKos[,c(1:5,which(colnames(binKos) %in% taxa$Bin.Id))]
binKos <- binKos[!is.na(binKos$Metabolism),]
binKos[is.na(binKos)] <- 0
count <- t(binKos[,-c(1:5)])
colnames(count) <- binKos$KO_ID
count[count > 1] <- 1
count <- as.data.frame(count)
count$well <- taxa$keyWell
count$well <- as.factor(count$well)
count
t(count)
duplicated(t(count))
t(count)
duplicated(t(count))
binKos$Gene
binKos$KO_ID
bins <- read.csv(here::here("data/2020-05-03/bin_rpkm_filtered.csv"))
taxa <- read.csv(here::here("data/2020-05-03/bin_taxons_filtered.csv"))
library(NMF)
binNMF <- nmf(x = as.matrix(bins[,-1]), rank = 3)
keyFeatures <- extractFeatures(binNMF, method = 0.99)
linkedFactors <- apply(coef(binNMF), 1, function(row) {
row > 0.01
})
print(linkedFactors)
rm(linkedFactors, binNMF)
nshq <- bins[keyFeatures[[1]],1]
wab55 <- bins[keyFeatures[[2]],1]
wab105 <- bins[keyFeatures[[3]],1]
taxa$keyWell <- ""
taxa$keyWell[taxa$Bin.Id %in% gsub("-", "_", nshq)] <- "nshq"
taxa$keyWell[taxa$Bin.Id %in% gsub("-", "_", wab55)] <- "wab55"
taxa$keyWell[taxa$Bin.Id %in% gsub("-", "_", wab105)] <- "wab105"
taxa <- taxa[taxa$keyWell != "",]
write.csv(taxa, file = here::here("data/2020-05-03/key_well_taxa.csv"),
row.names = F)
rm(wab105,wab55, nshq, keyFeatures, bins)
binKos <- read.csv(here::here("data/2020-04-12/Oman_bins_kos.csv"),
stringsAsFactors = F)
# filtering data to only consider key bins
binKos <- binKos[,c(1:5,which(colnames(binKos) %in% taxa$Bin.Id))]
binKos <- binKos[!is.na(binKos$Metabolism),]
binKos <- binKos[!duplicated(binKos$KO_ID),]
binKos[is.na(binKos)] <- 0
count <- t(binKos[,-c(1:5)])
colnames(count) <- binKos$KO_ID
count[count > 1] <- 1
count <- as.data.frame(count)
count$well <- taxa$keyWell
count$well <- as.factor(count$well)
library(randomForest)
require(caTools)
groupCounts <- table(count$well)
groupCounts
trainSamps[count$well == names(groupCounts)[1]][sample(size = 6,x = groupCounts[1])] <- T
trainSamps[count$well == names(groupCounts)[2]][sample(size = 6,x = groupCounts[2])] <- T
trainSamps[count$well == names(groupCounts)[3]][sample(size = 6,x = groupCounts[3])] <- T
train <- count[trainSamps,]
test  <- count[!trainSamps,]
rf <- randomForest(
# denotes what I'm actually predicting for
well ~ .,
data=train,
importance = T
)
rf
pred <- predict(rf, newdata=test)
pred
trainSamps[count$well == names(groupCounts)[1]][sample(size = 6,x = groupCounts[1])] <- T
trainSamps[count$well == names(groupCounts)[2]][sample(size = 6,x = groupCounts[2])] <- T
trainSamps[count$well == names(groupCounts)[3]][sample(size = 6,x = groupCounts[3])] <- T
train <- count[trainSamps,]
test  <- count[!trainSamps,]
test
bins <- read.csv(here::here("data/2020-05-03/bin_rpkm_filtered.csv"))
taxa <- read.csv(here::here("data/2020-05-03/bin_taxons_filtered.csv"))
library(NMF)
binNMF <- nmf(x = as.matrix(bins[,-1]), rank = 3)
keyFeatures <- extractFeatures(binNMF, method = 0.99)
linkedFactors <- apply(coef(binNMF), 1, function(row) {
row > 0.01
})
print(linkedFactors)
rm(linkedFactors, binNMF)
nshq <- bins[keyFeatures[[1]],1]
wab55 <- bins[keyFeatures[[2]],1]
wab105 <- bins[keyFeatures[[3]],1]
taxa$keyWell <- ""
taxa$keyWell[taxa$Bin.Id %in% gsub("-", "_", nshq)] <- "nshq"
taxa$keyWell[taxa$Bin.Id %in% gsub("-", "_", wab55)] <- "wab55"
taxa$keyWell[taxa$Bin.Id %in% gsub("-", "_", wab105)] <- "wab105"
taxa <- taxa[taxa$keyWell != "",]
write.csv(taxa, file = here::here("data/2020-05-03/key_well_taxa.csv"),
row.names = F)
rm(wab105,wab55, nshq, keyFeatures, bins)
binKos <- read.csv(here::here("data/2020-04-12/Oman_bins_kos.csv"),
stringsAsFactors = F)
# filtering data to only consider key bins
binKos <- binKos[,c(1:5,which(colnames(binKos) %in% taxa$Bin.Id))]
binKos <- binKos[!is.na(binKos$Metabolism),]
binKos <- binKos[!duplicated(binKos$KO_ID),]
binKos[is.na(binKos)] <- 0
count <- t(binKos[,-c(1:5)])
colnames(count) <- binKos$KO_ID
count[count > 1] <- 1
count <- as.data.frame(count)
count$well <- taxa$keyWell
count$well <- as.factor(count$well)
count
groupCounts <- table(count$well)
groupCounts
count$well
trainSamps[count$well == names(groupCounts)[1]][sample(size = 3,x = groupCounts[1])] <- T
trainSamps[count$well == names(groupCounts)[2]][sample(size = 3,x = groupCounts[2])] <- T
trainSamps[count$well == names(groupCounts)[3]][sample(size = 3,x = groupCounts[3])] <- T
trainSamps <- logical(length = sum(groupCounts))
trainSamps[count$well == names(groupCounts)[1]][sample(size = 3,x = groupCounts[1])] <- T
trainSamps[count$well == names(groupCounts)[2]][sample(size = 3,x = groupCounts[2])] <- T
trainSamps[count$well == names(groupCounts)[3]][sample(size = 3,x = groupCounts[3])] <- T
train <- count[trainSamps,]
test  <- count[!trainSamps,]
rf <- randomForest(
# denotes what I'm actually predicting for
well ~ .,
data=train,
importance = T
)
rf
groupCounts <- table(count$well)
groupCounts
count$well
count$well != "wab105"
binKos <- read.csv(here::here("data/2020-04-12/Oman_bins_kos.csv"),
stringsAsFactors = F)
# filtering data to only consider key bins
binKos <- binKos[,c(1:5,which(colnames(binKos) %in% taxa$Bin.Id))]
binKos <- binKos[!is.na(binKos$Metabolism),]
binKos <- binKos[!duplicated(binKos$KO_ID),]
binKos[is.na(binKos)] <- 0
count <- t(binKos[,-c(1:5)])
colnames(count) <- binKos$KO_ID
count[count > 1] <- 1
count <- as.data.frame(count)
count$well <- taxa$keyWell
count$well[count$well != "wab105"] <- "other"
count$well <- as.factor(count$well)
library(randomForest)
require(caTools)
groupCounts <- table(count$well)
trainSamps <- logical(length = sum(groupCounts))
trainSamps[count$well == names(groupCounts)[1]][sample(size = 3,x = groupCounts[1])] <- T
trainSamps[count$well == names(groupCounts)[2]][sample(size = 3,x = groupCounts[2])] <- T
trainSamps[count$well == names(groupCounts)[3]][sample(size = 3,x = groupCounts[3])] <- T
library(randomForest)
require(caTools)
groupCounts <- table(count$well)
trainSamps <- logical(length = sum(groupCounts))
trainSamps
trainSamps
names(groupCounts)
groupCounts
bins <- read.csv(here::here("data/2020-05-03/bin_rpkm_filtered.csv"))
taxa <- read.csv(here::here("data/2020-05-03/bin_taxons_filtered.csv"))
library(NMF)
binNMF <- nmf(x = as.matrix(bins[,-1]), rank = 3)
keyFeatures <- extractFeatures(binNMF, method = 0.99)
linkedFactors <- apply(coef(binNMF), 1, function(row) {
row > 0.01
})
print(linkedFactors)
rm(linkedFactors, binNMF)
nshq <- bins[keyFeatures[[1]],1]
wab55 <- bins[keyFeatures[[2]],1]
wab105 <- bins[keyFeatures[[3]],1]
taxa$keyWell <- ""
taxa$keyWell[taxa$Bin.Id %in% gsub("-", "_", nshq)] <- "nshq"
taxa$keyWell[taxa$Bin.Id %in% gsub("-", "_", wab55)] <- "wab55"
taxa$keyWell[taxa$Bin.Id %in% gsub("-", "_", wab105)] <- "wab105"
taxa <- taxa[taxa$keyWell != "",]
write.csv(taxa, file = here::here("data/2020-05-03/key_well_taxa.csv"),
row.names = F)
rm(wab105,wab55, nshq, keyFeatures, bins)
binKos <- read.csv(here::here("data/2020-04-12/Oman_bins_kos.csv"),
stringsAsFactors = F)
# filtering data to only consider key bins
binKos <- binKos[,c(1:5,which(colnames(binKos) %in% taxa$Bin.Id))]
binKos <- binKos[!is.na(binKos$Metabolism),]
binKos <- binKos[!duplicated(binKos$KO_ID),]
binKos[is.na(binKos)] <- 0
count <- t(binKos[,-c(1:5)])
colnames(count) <- binKos$KO_ID
count[count > 1] <- 1
count <- as.data.frame(count)
count$well <- taxa$keyWell
count$well[count$well != "wab55"] <- "other"
count$well <- as.factor(count$well)
library(randomForest)
require(caTools)
groupCounts <- table(count$well)
trainSamps <- logical(length = sum(groupCounts))
trainSamps[count$well == names(groupCounts)[1]][sample(size = 3,x = groupCounts[1])] <- T
groupCounts
taxa$keyWell
table(taxa$keyWell)
binKos <- read.csv(here::here("data/2020-04-12/Oman_bins_kos.csv"),
stringsAsFactors = F)
# filtering data to only consider key bins
binKos <- binKos[,c(1:5,which(colnames(binKos) %in% taxa$Bin.Id))]
binKos <- binKos[!is.na(binKos$Metabolism),]
binKos <- binKos[!duplicated(binKos$KO_ID),]
binKos[is.na(binKos)] <- 0
count <- t(binKos[,-c(1:5)])
colnames(count) <- binKos$KO_ID
count[count > 1] <- 1
count <- as.data.frame(count)
count$well <- taxa$keyWell
count$well[count$well != "nshq"] <- "other"
count$well <- as.factor(count$well)
library(randomForest)
require(caTools)
groupCounts <- table(count$well)
groupCounts
trainSamps <- logical(length = sum(groupCounts))
trainSamps[count$well == names(groupCounts)[1]][sample(size = 10,x = groupCounts[1])] <- T
trainSamps[count$well == names(groupCounts)[2]][sample(size = 10,x = groupCounts[2])] <- T
train <- count[trainSamps,]
test  <- count[!trainSamps,]
rf <- randomForest(
# denotes what I'm actually predicting for
well ~ .,
data=train,
importance = T
)
rf
trainSamps[count$well == names(groupCounts)[1]][sample(size = 12,x = groupCounts[1])] <- T
trainSamps[count$well == names(groupCounts)[2]][sample(size = 12,x = groupCounts[2])] <- T
train <- count[trainSamps,]
test  <- count[!trainSamps,]
rf <- randomForest(
# denotes what I'm actually predicting for
well ~ .,
data=train,
importance = T
)
rf
trainSamps[count$well == names(groupCounts)[1]][sample(size = 13,x = groupCounts[1])] <- T
trainSamps[count$well == names(groupCounts)[2]][sample(size = 13,x = groupCounts[2])] <- T
train <- count[trainSamps,]
test  <- count[!trainSamps,]
rf <- randomForest(
# denotes what I'm actually predicting for
well ~ .,
data=train,
importance = T
)
rf
pred <- predict(rf, newdata=test)
pred
pred
table(count$well)
trainSamps[count$well == names(groupCounts)[1]][sample(size = 14,x = groupCounts[1])] <- T
trainSamps[count$well == names(groupCounts)[2]][sample(size = 14,x = groupCounts[2])] <- T
train <- count[trainSamps,]
test  <- count[!trainSamps,]
rf <- randomForest(
# denotes what I'm actually predicting for
well ~ .,
data=train,
importance = T
)
rf
trainSamps[count$well == names(groupCounts)[1]][sample(size = 15,x = groupCounts[1])] <- T
trainSamps[count$well == names(groupCounts)[2]][sample(size = 15,x = groupCounts[2])] <- T
train <- count[trainSamps,]
test  <- count[!trainSamps,]
rf <- randomForest(
# denotes what I'm actually predicting for
well ~ .,
data=train,
importance = T
)
rf
rf <- randomForest(
# denotes what I'm actually predicting for
well ~ .,
data=count,
importance = T
)
rf
binKos <- read.csv(here::here("data/2020-04-12/Oman_bins_kos.csv"),
stringsAsFactors = F)
# filtering data to only consider key bins
binKos <- binKos[,c(1:5,which(colnames(binKos) %in% taxa$Bin.Id))]
binKos <- binKos[!is.na(binKos$Metabolism),]
binKos <- binKos[!duplicated(binKos$KO_ID),]
binKos[is.na(binKos)] <- 0
count <- t(binKos[,-c(1:5)])
colnames(count) <- binKos$KO_ID
#count[count > 1] <- 1
count <- as.data.frame(count)
count$well <- taxa$keyWell
#count$well[count$well != "nshq"] <- "other"
count$well <- as.factor(count$well)
library(randomForest)
require(caTools)
rf <- randomForest(
# denotes what I'm actually predicting for
well ~ .,
data=count,
importance = T
)
pred <- predict(rf, newdata=test)
pred
test$well
rf
rf
rf <- randomForest(
# denotes what I'm actually predicting for
well ~ .,
data=count,
importance = T
)
rf
rf <- randomForest(
# denotes what I'm actually predicting for
well ~ .,
data=count,
importance = T
)
rf
princomp(count[,-ncol(count)])
-ncol(count)
princomp(as.matrix(count[,-ncol(count)]))
count[,-ncol(count)]
as.matrix(count[,-ncol(count)])
princomp(diff(as.matrix(count[,-ncol(count)])))
princomp(dist(as.matrix(count[,-ncol(count)])))
pc <- princomp(dist(as.matrix(count[,-ncol(count)])))
plot(pc$scores[,1],pc$scores[,2])
binKos <- read.csv(here::here("data/2020-04-12/Oman_bins_kos.csv"),
stringsAsFactors = F)
# filtering data to only consider key bins
binKos <- binKos[,c(1:5,which(colnames(binKos) %in% taxa$Bin.Id))]
binKos <- binKos[!is.na(binKos$Metabolism),]
binKos <- binKos[!duplicated(binKos$KO_ID),]
binKos[is.na(binKos)] <- 0
count <- t(binKos[,-c(1:5)])
colnames(count) <- binKos$KO_ID
count[count > 1] <- 1
count <- as.data.frame(count)
count$well <- taxa$keyWell
#count$well[count$well != "nshq"] <- "other"
count$well <- as.factor(count$well)
library(randomForest)
require(caTools)
pc <- princomp(dist(as.matrix(count[,-ncol(count)])))
plot(pc$scores[,1],pc$scores[,2])
count
pc <- princomp(t(as.matrix(count[,-ncol(count)])))
plot(pc$scores[,1],pc$scores[,2])
pc <- princomp(t(count[,-ncol(count)]))
plot(pc$scores[,1],pc$scores[,2])
plot(pc$scores[,3],pc$scores[,2])
plot(pc$scores[,4],pc$scores[,2])
plot(pc$scores[,4],pc$scores[,3])
plot(pc$scores[,5],pc$scores[,4])
