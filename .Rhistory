library(dplyr)
library(ggplot2)
library(here)
library(limma)
library(RColorBrewer)
library(ggbiplot)
omanFT <- read.table(here::here("data/2018-11-23/QA_oman_feature_table.txt"), header = T,
stringsAsFactors = F)
dataCols <- 3:7
as.matrix(omanFT[,dataCols]) %>% heatmap(main = "Feature Distribution Between Samples")
overlapTable <- omanFT[,dataCols] %>% apply(2, function(x) {
x > 0
})
vennDiagram(vennCounts(overlapTable), circle.col = brewer.pal(5, "Set1"))
rm(overlapTable)
mOz <- omanFT$Neutral_Mass[order(omanFT$Neutral_Mass)]
abs_abu <- omanFT[order(omanFT$Neutral_Mass),dataCols] %>% apply(1, max)
formTable <- data.frame(mz = as.character(mOz), as.character(abs_abu), stringsAsFactors = F)
formTable <- data.frame(mz = as.character(mOz), as.character(abs_abu), stringsAsFactors = F)
is.na(formTable$mz)
sum(is.na(formTable$mz))
sum(!is.na(formTable$mz))
formTable[!is.na(formTable$mz),]
nonNaFormTable <- formTable[!is.na(formTable$mz),]
write.table(x = nonNaFormTable, row.names = F, sep = "\t",
file = here::here("data/2018-11-24/formularity_table.txt"),
quote = F)
readLines("data/2018-11-24/formularity_table.txt")
formTable <- data.frame(mz = as.character(mOz), abs_abu = as.character(abs_abu), stringsAsFactors = F)
nonNaFormTable <- formTable[!is.na(formTable$mz),]
write.table(x = nonNaFormTable, row.names = F, sep = "\t",
file = here::here("data/2018-11-24/formularity_table.txt"),
quote = F)
readLines("data/2018-11-24/formularity_table.txt")
omanFT <- read.csv(here("data/2018-11-22/OM17 compound_measurements_10k_blanks.csv"),
header = T,
skip = 4)
omanFT
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidyverse)
library(ROCR)
library(caret)
library(caret)
library(doParallel)
library(ellipse)
voice <- read.csv(here::here("data/2018-11-27/voice.csv"),
header=T,stringsAsFactors = F)
voice
voice$label <- as.factor(voice$label)
voice
plotTheme <- function(base_size = 12) {
theme(
text = element_text( color = "black"),
plot.title = element_text(size = 10,colour = "black",hjust=0.5),
plot.subtitle = element_text(face="italic"),
plot.caption = element_text(hjust=0),
axis.ticks = element_blank(),
panel.background = element_blank(),
panel.grid.major = element_line("grey80", size = 0.1),
panel.grid.minor = element_blank(),
strip.background = element_rect(fill = "grey80", color = "white"),
strip.text = element_text(size=12),
axis.title = element_text(size=8),
axis.text = element_text(size=8),
axis.title.x = element_text(hjust=1),
axis.title.y = element_text(hjust=1),
plot.background = element_blank(),
legend.background = element_blank(),
legend.title = element_text(colour = "black", face = "bold"),
legend.text = element_text(colour = "black", face = "bold"))
}
auc_values <- data.frame(feature_selection = c("No Feature Elimination","Correlation","Recursive Feature Elimination"),values=c(0,0,0))
auc_values
group_by(label) %>%
summarise(n=n())
voice %>% group_by(label) %>%
summarise(n=n())
voice %>% group_by(label) %>%
summarise(n=n()) %>%
ggplot(aes(x=label,y=n))+
geom_bar(stat="identity")+plotTheme()+labs(title="Number of Each Instance")
voice %>% na.omit() %>%
gather(type,value,1:20)
voice %>% na.omit() %>%
gather(type,value,1:20) %>%
ggplot(aes(x=value,fill=label)) +
geom_density(alpha=0.3)+
plotTheme()+
facet_wrap(~type,scales="free")+
theme(axis.text.x = element_text(angle = 90,vjust=1))+
labs(title="Density Plots of Data across Variables")
value
voice %>% na.omit() %>%
gather(type,value,1:20) %>%
ggplot(aes(x=value,fill=label))
voice %>% na.omit() %>%
gather(type,value,1:20)
voice %>% na.omit() %>%
gather(type,value,1:20) %>%
ggplot(aes(x=value,fill=label))
voice %>% na.omit() %>%
gather(type,value,1:20) %>% ## see how gather works
ggplot(aes(x=value,fill=label)) +
geom_density(alpha=0.3)+
plotTheme()+
facet_wrap(~type,scales="free")+
theme(axis.text.x = element_text(angle = 90,vjust=1))+
labs(title="Density Plots of Data across Variables")
label
colnames(voice)
ncol(voice)
pca_viz <- function(dataframe,label,heading) {
data_new <- dataframe[-label] ## removing factor col
#head(data_new)
pca_temp <- prcomp((data_new),scale=T,center=T)
pcaOutput_df <- as.data.frame(pca_temp$x)
pcaOutput_df$label <- dataframe[,label]
centroids <- pcaOutput_df %>% group_by(label) %>%
summarise(PC1=mean(PC1),PC2=mean(PC2))
# 95% confidence region
conf.rgn_male <- data.frame(label="male",ellipse(cov(pcaOutput_df[pcaOutput_df$label == "male", c("PC1","PC2")]),
centre = as.matrix(centroids[centroids$label == "male", c("PC1","PC2")]),
level = 0.95))
conf.rgn_female <- data.frame(label="female",ellipse(cov(pcaOutput_df[pcaOutput_df$label == "female", c("PC1","PC2")]),
centre = as.matrix(centroids[centroids$label == "female", c("PC1","PC2")]),
level = 0.95))
conf.rgn <- bind_rows(conf.rgn_female,conf.rgn_male) %>% mutate(label = as.factor(label))
var <- (pca_temp$sdev)^2/sum((pca_temp$sdev)^2)
pcaOutput_df %>%
ggplot(aes(x=PC1,y=PC2,colour=label))+
geom_point(alpha=0.3)+
geom_polygon(data=conf.rgn,aes(fill=label),alpha=0.2)+
labs(title=heading,
x=paste("PC1",round(var[1]*100,2),"% Variance"),
y = paste("PC2",round(var[2]*100,2),"% Variance"))+plotTheme()+theme(legend.position = "bottom")
}
dataframe = voice
label = 21
heading = "PCA Visualization"
data_new <- dataframe[-label] ## removing factor col
pca_temp <- prcomp((data_new),scale=T,center=T)
pcaOutput_df <- as.data.frame(pca_temp$x)
pcaOutput_df
pcaOutput_df$label <- dataframe[,label]
pcaOutput_df
centroids <- pcaOutput_df %>% ## Centrolids just represents the mean of one class of observations
group_by(label) %>%
summarise(PC1=mean(PC1),PC2=mean(PC2))
centroids
ellipse(cov(pcaOutput_df[pcaOutput_df$label == "male", c("PC1","PC2")]),
centre = as.matrix(centroids[centroids$label == "male", c("PC1","PC2")]),
level = 0.95)
pcaOutput_df
ellipse(cov(pcaOutput_df[pcaOutput_df$label == "male", c("PC1","PC2")])
ellipse(cov(pcaOutput_df[pcaOutput_df$label == "male", c("PC1","PC2")])
cov(pcaOutput_df[pcaOutput_df$label == "male", c("PC1","PC2")])
centroids[centroids$label == "male", c("PC1","PC2")])
centroids[centroids$label == "male", c("PC1","PC2")]
conf.rgn_male <- data.frame(label="male",ellipse(cov(pcaOutput_df[pcaOutput_df$label == "male", c("PC1","PC2")]), ## covariance of PC1 and PC2 with respect to male
centre = as.matrix(centroids[centroids$label == "male", c("PC1","PC2")]),
## cartesian coordinates of the centers
level = 0.95))
conf.rgn_female <- data.frame(label="female",ellipse(cov(pcaOutput_df[pcaOutput_df$label == "female", c("PC1","PC2")]),
centre = as.matrix(centroids[centroids$label == "female", c("PC1","PC2")]),
level = 0.95))
bind_rows
bind_rows(conf.rgn_female,conf.rgn_male)
f
conf.rgn <- bind_rows(conf.rgn_female,conf.rgn_male) %>% mutate(label = as.factor(label))
pca_temp$sdev
pca_temp
(pca_temp$sdev)^2/sum((pca_temp$sdev)^2)
var <- (pca_temp$sdev)^2/sum((pca_temp$sdev)^2)
var
pcaOutput_df %>%
ggplot(aes(x=PC1,y=PC2,colour=label))+
geom_point(alpha=0.3)
pcaOutput_df %>%
ggplot(aes(x=PC1,y=PC2,colour=label))+
geom_point(alpha=0.3) +
geom_polygon(data=conf.rgn,aes(fill=label),alpha=0.2) + ## drawing the elipses
labs(title=heading,
x=paste("PC1",round(var[1]*100,2),"% Variance"),
y = paste("PC2",round(var[2]*100,2),"% Variance"))+
plotTheme()+
theme(legend.position = "bottom")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ROCR)
library(caret)
library(doParallel)
library(ellipse)
voice <- read.csv(here::here("data/2018-11-27/voice.csv"),
header=T,stringsAsFactors = F)
str(voice)
voice$label <- as.factor(voice$label)
plotTheme <- function(base_size = 12) {
theme(
text = element_text( color = "black"),
plot.title = element_text(size = 10,colour = "black",hjust=0.5),
plot.subtitle = element_text(face="italic"),
plot.caption = element_text(hjust=0),
axis.ticks = element_blank(),
panel.background = element_blank(),
panel.grid.major = element_line("grey80", size = 0.1),
panel.grid.minor = element_blank(),
strip.background = element_rect(fill = "grey80", color = "white"),
strip.text = element_text(size=12),
axis.title = element_text(size=8),
axis.text = element_text(size=8),
axis.title.x = element_text(hjust=1),
axis.title.y = element_text(hjust=1),
plot.background = element_blank(),
legend.background = element_blank(),
legend.title = element_text(colour = "black", face = "bold"),
legend.text = element_text(colour = "black", face = "bold"))
}
auc_values <- data.frame(feature_selection = c("No Feature Elimination","Correlation","Recursive Feature Elimination"),values=c(0,0,0))
voice %>% group_by(label) %>%
summarise(n=n()) %>%
ggplot(aes(x=label,y=n))+
geom_bar(stat="identity")+plotTheme()+labs(title="Number of Each Instance")
voice %>% na.omit() %>%
gather(type,value,1:20) %>% ## see how gather works
ggplot(aes(x=value,fill=label)) +
geom_density(alpha=0.3)+
plotTheme()+
facet_wrap(~type,scales="free")+
theme(axis.text.x = element_text(angle = 90,vjust=1))+
labs(title="Density Plots of Data across Variables")
#library(pcaGoPromoter)
pca_viz <- function(dataframe,label,heading) {
data_new <- dataframe[-label] ## removing factor col
#head(data_new)
pca_temp <- prcomp((data_new),scale=T,center=T)
pcaOutput_df <- as.data.frame(pca_temp$x)
pcaOutput_df$label <- dataframe[,label]
## Centrolids just represents the mean of one class of observations
## and is returned in the form of a cartesian coordinate
centroids <- pcaOutput_df %>%
group_by(label) %>%
summarise(PC1=mean(PC1),PC2=mean(PC2))
# 95% confidence region
conf.rgn_male <- data.frame(label="male",ellipse(cov(pcaOutput_df[pcaOutput_df$label == "male", c("PC1","PC2")]), ## covariance of PC1 and PC2 with respect to male
centre = as.matrix(centroids[centroids$label == "male", c("PC1","PC2")]),
## cartesian coordinates of the centers
level = 0.95))
conf.rgn_female <- data.frame(label="female",ellipse(cov(pcaOutput_df[pcaOutput_df$label == "female", c("PC1","PC2")]),
centre = as.matrix(centroids[centroids$label == "female", c("PC1","PC2")]),
level = 0.95))
conf.rgn <- bind_rows(conf.rgn_female,conf.rgn_male) %>% mutate(label = as.factor(label))
var <- (pca_temp$sdev)^2/sum((pca_temp$sdev)^2)
pcaOutput_df %>%
ggplot(aes(x=PC1,y=PC2,colour=label))+
geom_point(alpha=0.3) +
geom_polygon(data=conf.rgn,aes(fill=label),alpha=0.2) + ## drawing the elipses
labs(title=heading,
x=paste("PC1",round(var[1]*100,2),"% Variance"),
y = paste("PC2",round(var[2]*100,2),"% Variance"))+
plotTheme()+
theme(legend.position = "bottom")
}
pca_viz(dataframe = voice, label = 21,
heading = "PCA Visualization") ## 21 is the factor column for gender
registerDoParallel()
trainControl
?trainControl
## control behavior of train function
control <- trainControl(method="repeatedcv",number=10,repeats = 10)
?train
label
## fit predictive model of different tuning parameters
model <- train(label ~ ., data = voice, ## training data with respect to params
method = "rf", ## running a random forest
preProcess = c("scale", "center"), ## normalization stuff...
trControl = control)
model
start_time <- Sys.time()
## Note, I am doing this on the original data w/out PCA
model <- train(label ~ ., data = voice, ## training data with respect to params
method = "rf", ## running a random forest
preProcess = c("scale", "center"), ## normalization stuff...
trControl = control)
end_time <- Sys.time()
beepr::beep()
end_time
start_time
model
importance<- varImp(model,scale=T)
importance
?varImp
importance
importance$importance
importance
importance$model
importance$calledFrom
imp_df1 <- importance$importance
rownames(imp_df1)
imp_df1
imp_df1$group <- rownames(imp_df1)
imp_df1 %>%
ggplot(aes(x=reorder(group,Overall),y=Overall),size=2)+
geom_bar(stat = "identity")+
theme(axis.text.x = element_text(vjust=1,angle=90))+
labs(x="Variable",y="Overall Importance",title="Scaled Feature Importance")+
plotTheme()
train
train <- sample(dim(voice)[1],dim(voice)[1]*0.9)
train
set.seed(100)
train <- sample(dim(voice)[1],dim(voice)[1]*0.9)
train
voice_train <- voice[train,]
voice_train
# subsetting the data to train the random forrest
voice_train <- voice[train,]
voice_test <- voice[-train,]
set.seed(100)
model_rf <- train(label~.,
data=voice_train,
method="rf",
preProcess=c("scale","center"),
trControl = trainControl(method = "repeatedcv",number=5,repeats = 10,verboseIter = F)
)
voice_test_pred <- predict(model_rf, voice_test[,-21])
voice_test_pred
predvec <- ifelse(voice_test_pred=="female", 1, 0)
realvec <- ifelse(voice_test$label=="female", 1, 0)
pred <- prediction(predvec,realvec)
pred
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
## Checking how well the model works
pred <- prediction(predvec,realvec)
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
plot(perf, main = "ROC curve for Random Forest Classifier",col = "blue", lwd = 3)
plot(perf, main = "ROC curve for Random Forest Classifier",col = "blue", lwd = 3)
abline(a = 0, b = 1, lwd = 2, lty = 2)
abline(a = 0, b = 1, lwd = 2, lty = 2)
perf.auc <- performance(pred, measure = "auc")
paste("ROC Value",unlist(perf.auc@y.values))
auc_values[1,]$values <- unlist(perf.auc@y.values)
auc_values
voice_test_pred <- predict(model_rf, voice_test[,-21]) # predicts which sample belongs to either group
predvec <- ifelse(voice_test_pred=="female", 1, 0)
realvec <- ifelse(voice_test$label=="female", 1, 0)
## Checking how well the model works
pred <- prediction(predvec,realvec)
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
plot(perf, main = "ROC curve for Random Forest Classifier",col = "blue", lwd = 3)
abline(a = 0, b = 1, lwd = 2, lty = 2)
perf.auc <- performance(pred, measure = "auc")
paste("ROC Value",unlist(perf.auc@y.values))
auc_values[1,]$values <- unlist(perf.auc@y.values)
library(reshape2)
cor_voice <- round(cor(voice[,-21]),2)
cor_voice_df <- melt((cor_voice))
cor_voice_df %>%
ggplot(aes(x=Var1,y=Var2,fill=value))+geom_tile()+plotTheme()+theme(axis.text.x = element_text(vjust=1,angle=90),legend.position = "bottom")+scale_fill_continuous(low="#eb0096",high="#a3742c")+labs(title="Correlation Plots")
findCorrelation(cor_voice, cutoff = 0.7, verbose = TRUE)
highlyCor <- colnames(voice)[findCorrelation(cor_voice, cutoff = 0.7, verbose = TRUE)]
print(highlyCor)
voice_correlation <- voice[,which(!colnames(voice) %in% highlyCor)]
pca_viz(voice_correlation,which(colnames(voice_correlation)=="label"),"PCA with Correlated Terms Removed")
#train <- sample(dim(voice)[1],dim(voice)[1]*0.9)
voice_train <- voice_correlation[train,]
voice_test <- voice_correlation[-train,]
set.seed(100)
model_rf <- train(label~.,
data=voice_train,
method="rf",
preProcess=c("scale","center"),
trControl = trainControl(method = "repeatedcv",number=5,repeats = 10,verboseIter = F)
)
voice_test_pred <- predict(model_rf, voice_test[,-which(colnames(voice_test)=="label")])
predvec <- ifelse(voice_test_pred=="female", 1, 0)
realvec <- ifelse(voice_test$label=="female", 1, 0)
pred <- prediction(predvec,realvec)
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
plot(perf, main = "ROC curve for Random Forest Classifier With Correlated Terms Removed",col = "blue", lwd = 3)
abline(a = 0, b = 1, lwd = 2, lty = 2)
perf.auc <- performance(pred, measure = "auc")
paste("ROC Value",unlist(perf.auc@y.values))
auc_values[2,]$values <- unlist(perf.auc@y.values)
voice_test_pred <- predict(model_rf, voice_test[,-21]) # predicts which sample belongs to either group
predvec <- ifelse(voice_test_pred=="female", 1, 0)
realvec <- ifelse(voice_test$label=="female", 1, 0)
## Checking how well the model works
pred <- prediction(predvec,realvec)
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
plot(perf, main = "ROC curve for Random Forest Classifier",col = "blue", lwd = 3)
abline(a = 0, b = 1, lwd = 2, lty = 2)
perf.auc <- performance(pred, measure = "auc")
paste("ROC Value",unlist(perf.auc@y.values))
auc_values[1,]$values <- unlist(perf.auc@y.values)
set.seed(100)
control <- rfeControl(functions=rfFuncs,method = "cv",number=10)
results_1 <- rfe(x=voice[,-21],y=voice$label,sizes=(1:9),rfeControl = control)
predictors(results_1)
predictors(results_1)
voice_rfe <- voice[,c(which(colnames(voice) %in% predictors(results_1)),21)]
pca_viz(voice_rfe,which(colnames(voice_rfe)=="label"),"PCA with rfe")
voice_train <- voice_rfe[train,]
voice_test <- voice_rfe[-train,]
set.seed(100)
model_rf <- train(label~.,
data=voice_train,
method="rf",
preProcess=c("scale","center"),
trControl = trainControl(method = "repeatedcv",number=5,repeats = 10,verboseIter = F)
)
voice_test_pred <- predict(model_rf, voice_test[,-which(colnames(voice_test)=="label")])
voice_test_pred
predvec <- ifelse(voice_test_pred=="female", 1, 0)
realvec <- ifelse(voice_test$label=="female", 1, 0)
pred <- prediction(predvec,realvec)
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
plot(perf, main = "ROC curve for Random Forest Classifier",col = "blue", lwd = 3)
abline(a = 0, b = 1, lwd = 2, lty = 2)
perf.auc <- performance(pred, measure = "auc")
paste("ROC Value",unlist(perf.auc@y.values))
auc_values[3,]$values <- unlist(perf.auc@y.values)
auc_values %>%
ggplot(aes(x=feature_selection,y=values))+geom_bar(stat="identity")+plotTheme()+theme(axis.text.x = element_text(vjust=-1,angle=90))
ls
library(dplyr)
library(here)
omanFT
library(dplyr)
library(here)
omanFT <- read.csv(here("data/2018-11-22/OM17 compound_measurements_10k_blanks.csv"),
header = T,
skip = 4)
metadata <- read.table(here("data/2018-11-22/metadata.txt"),
header = T, sep = " ", stringsAsFactors = F)
metadata <- metadata[-nrow(metadata),]
metadata$Sample_Name <- metadata$Sample_Name %>% sub(":", "", .)
dataCols <- list()
for(i in 1:nrow(metadata)) {
dataCols[[i]] <- grep(metadata$Sample_Name[i],colnames(omanFT))[1]
}
colnames(omanFT)[c(2,5)] <- c("Neutral_Mass", "Retention_Time")
omanFT$Retention_Time <- omanFT$Retention_Time * 60
## consider
omanFT <- omanFT[,c(2,5, unlist(dataCols))]
dataCols <- grep("XS1", colnames(omanFT))
colnames(omanFT)[dataCols] <- metadata$Sample_Type[which(metadata$Sample_Name %in%
colnames(omanFT)[dataCols])]
rm(i)
intensityTable <- omanFT[,dataCols]
x <- sapply(1:ncol(intensityTable), function(x) {
hist(intensityTable[,x], main = colnames(intensityTable)[x], breaks = 250)
})
omanFT[,dataCols] <- log1p(intensityTable)
rm(x, intensityTable)
heat <- omanFT[,dataCols]
blankCols <- grep("blank", colnames(heat), ignore.case = T)
name <- c("Count")
solvent <- heat[,blankCols[1]] > 0
spe <- heat[,blankCols[2]] > 0
overlap <- solvent | spe
knitr::kable(data.frame(Blank = name, Solvent = sum(solvent), SPE = sum(spe),
Overlap = sum(overlap), Total = length(spe)))
heatmap(as.matrix(heat), main = "Distribution of Features Between Samples")
rm(solvent, spe, overlap, name)
blankData <- heat[,blankCols]
sampleData <- heat[,-blankCols]
double <- log1p(2)
doubleCheck <- list()
for(i in seq_along(blankCols)) {
#minVal <- min(blankData[,i][blankData[,i] > 0])
#x <- blankData[,i][blankData[,i] == 0] <- minVal
foldChange <- apply(sampleData, 2, function(x) {
y <- x/blankData[,i]
infIndex <- is.infinite(y)
y[is.nan(y)] <- 0
if(length(infIndex) > 0) {
y[infIndex] <- max(y[!infIndex])
}
y
}) %>% apply(1, max)
hist(log(foldChange), breaks = 100,
main = paste(colnames(blankData)[i], "Features Under Median Sample Intensity"))
abline(v = double, lty = 2)
doubleCheck[[i]] <- foldChange > double
}
message("Difference in Retained Features Between Approaches: ", 2089 - 1242)
solvent <- !doubleCheck[[1]]
spe <- !doubleCheck[[2]]
overlap <- solvent | spe
name <- c("Count")
knitr::kable(data.frame(Blank = name, Solvent = sum(solvent), SPE = sum(spe),
Overlap = sum(overlap), Total = length(spe)))
omanFT <- omanFT[!overlap,]
rm(list=setdiff(ls(), c("omanFT", "metadata", "dataCols")))
heatmap(as.matrix(omanFT[,dataCols]), main = "Feature Distribution After QA")
omanFT <- omanFT[,!grepl("blank", colnames(omanFT), ignore.case = T)]
omanFT
omanFT[,3:7] %>% apply(2, function(col) {sum(col == 0)/length(col)})
omanFT
omanFT[,3:7] %>% cor()
omanFT[,3:7] %>% t() %>% cor()
omanFT[,3:7] %>% t()
omanFT[,3:7]
omanFT[,3:7] %>% as.matrix()
omanFT[,3:7] %>% as.matrix() %>% t()
omanFT[,3:7] %>% as.matrix() %>% t() %>% cor()
library(corrplot)
omanFT[,3:7] %>% as.matrix() %>% t() %>% cor() %>% coplot()
omanFT[,3:7] %>% as.matrix() %>% t() %>% cor() %>% plot()
omanFT[,3:7] %>% as.matrix() %>% t() %>% cor() %>% corrplot()
omanFT[,3:7] %>% as.matrix() %>% t() %>% cor() %>% corrplot()
